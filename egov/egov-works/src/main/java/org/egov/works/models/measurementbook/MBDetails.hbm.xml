<?xml version="1.0"?>
<!--
  ~    eGov  SmartCity eGovernance suite aims to improve the internal efficiency,transparency,
  ~    accountability and the service delivery of the government  organizations.
  ~
  ~     Copyright (C) 2017  eGovernments Foundation
  ~
  ~     The updated version of eGov suite of products as by eGovernments Foundation
  ~     is available at http://www.egovernments.org
  ~
  ~     This program is free software: you can redistribute it and/or modify
  ~     it under the terms of the GNU General Public License as published by
  ~     the Free Software Foundation, either version 3 of the License, or
  ~     any later version.
  ~
  ~     This program is distributed in the hope that it will be useful,
  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~     GNU General Public License for more details.
  ~
  ~     You should have received a copy of the GNU General Public License
  ~     along with this program. If not, see http://www.gnu.org/licenses/ or
  ~     http://www.gnu.org/licenses/gpl.html .
  ~
  ~     In addition to the terms of the GPL license to be adhered to in using this
  ~     program, the following additional terms are to be complied with:
  ~
  ~         1) All versions of this program, verbatim or modified must carry this
  ~            Legal Notice.
  ~            Further, all user interfaces, including but not limited to citizen facing interfaces,
  ~            Urban Local Bodies interfaces, dashboards, mobile applications, of the program and any
  ~            derived works should carry eGovernments Foundation logo on the top right corner.
  ~
  ~            For the logo, please refer http://egovernments.org/html/logo/egov_logo.png.
  ~            For any further queries on attribution, including queries on brand guidelines,
  ~            please contact contact@egovernments.org
  ~
  ~         2) Any misrepresentation of the origin of the material is prohibited. It
  ~            is required that all modified versions of this material be marked in
  ~            reasonable ways as different from the original version.
  ~
  ~         3) This license does not grant any rights to any user of the program
  ~            with regards to rights under trademark law for use of the trade names
  ~            or trademarks of eGovernments Foundation.
  ~
  ~   In case of any queries, you can reach eGovernments Foundation at contact@egovernments.org.
  ~
  -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
	<!-- Generated on 8th dec 09 -->
<hibernate-mapping>
	<class name="org.egov.works.models.measurementbook.MBDetails" table="EGW_MB_DETAILS">
		<id name="id" type="long">
			<column name="ID" />
			<generator class="org.hibernate.id.enhanced.SequenceStyleGenerator">
				<param name="sequence_name">SEQ_EGW_MB_DETAILS</param>
			</generator>
		</id>
		<many-to-one name="mbHeader"
			class="org.egov.works.models.measurementbook.MBHeader" column="MBHEADER_ID"
			not-null="true" fetch="select" insert="false" update="false"/>
		<many-to-one name="workOrderActivity"
			class="org.egov.works.models.workorder.WorkOrderActivity" column="WO_ACTIVITY_ID"
			not-null="true" fetch="select" />

		<property name="quantity" type="double">
			<column name="QUANTITY" precision="20" not-null="true"/>
		</property>
		 <property name="rate" type="double">
            <column name="RATE" precision="20" />
        </property>
        <property name="amount" type="double">
            <column name="AMOUNT" precision="20" />
        </property>     
		<property name="remarks" type="string">
			<column name="REMARKS" length="400" />
		</property>
         
		<property name="OrderNumber" type="string">
			<column name="ORDER_NUMBER"/>
		</property>
         <property name="mbdetailsDate" type="date">
			<column name="ORDER_DATE"/>
		</property>
		
		<many-to-one name="createdBy" class="org.egov.infra.admin.master.entity.User" column="CREATED_BY" not-null="true" fetch="select" />
		<many-to-one name="modifiedBy" class="org.egov.infra.admin.master.entity.User" column="MODIFIED_BY" fetch="select"/>
		<property name="createdDate" column="CREATED_DATE" type="timestamp" not-null="true"/>	
		<property name="modifiedDate" column="MODIFIED_DATE" type="timestamp" />
	</class>	
	<query name="prevCumulativeQuantity">
		<![CDATA[
     	select sum(mbd.quantity) from MBDetails mbd where (mbd.mbHeader.createdDate 
     	< (select createdDate from MBHeader where id = ?) or (select count(*) from MBHeader where id = ?) = 0 )
     	and mbd.mbHeader.egwStatus.code != ? 
     	group by mbd.workOrderActivity having mbd.workOrderActivity.id = ?  
    ]]>
	</query>
		<query name="prevCumulativeQuantityForCQ">
		<![CDATA[
     	select sum(mbd.quantity) from MBDetails mbd where (mbd.mbHeader.createdDate 
     	< (select createdDate from MBHeader where id = ?) or (select count(*) from MBHeader where id = ?) = 0 )
     	and mbd.mbHeader.egwStatus.code != ? and (mbd.workOrderActivity.workOrderEstimate.workOrder = ? or mbd.workOrderActivity.workOrderEstimate.workOrder.parent = ?)
     	group by mbd.workOrderActivity,mbd.workOrderActivity.activity having (mbd.workOrderActivity.id = ? or mbd.workOrderActivity.activity.id = ? ) 
    ]]>
	</query>
	
	<query name="prevCumulativeQuantityForREs">
		<![CDATA[
     	select sum(mbd.quantity) from MBDetails mbd where (mbd.mbHeader.createdDate 
     	< (select createdDate from MBHeader where id = ?) or (select count(*) from MBHeader where id = ?) = 0 )
     	and mbd.mbHeader.egwStatus.code != ?  
     	group by mbd.workOrderActivity.activity.parent having ((mbd.workOrderActivity.activity.parent is not null and mbd.workOrderActivity.activity.parent.id = ?)) 
    ]]>
	</query>
	<query name="totalApprovedMBAmount">
		<![CDATA[
     	select sum(mbd.quantity*mbd.workOrderActivity.approvedRate) from MBDetails mbd
     	 where mbd.mbHeader.egwStatus.code = ? 
     	and mbd.mbHeader.workOrderEstimate.workOrder.id = ? and mbd.mbHeader.workOrderEstimate.id = ? and trunc(mbd.mbHeader.state.createdDate) <= ? and mbd.mbHeader.egBillregister is null
    ]]>
	</query>
	<query name="totalApprovedMBAmountForCancelledBill">
		<![CDATA[
     	select sum(mbd.quantity*mbd.workOrderActivity.approvedRate) from MBDetails mbd
     	 where mbd.mbHeader.egwStatus.code = ? 
     	and mbd.mbHeader.workOrderEstimate.workOrder.id = ? and mbd.mbHeader.workOrderEstimate.id = ? and trunc(mbd.mbHeader.state.createdDate) <= ? 
     	and mbd.mbHeader.egBillregister is not null and mbd.mbHeader.egBillregister.status.code = ?
    ]]>
	</query>
	<query name="getUtlizedAmountForUnArrovedBill">
		<![CDATA[
     	select sum(reg.passedamount) from MBHeader mbh join mbh.egBillregister as reg where 
     	reg.status.code not in (?) and mbh.workOrder.id = ? and trunc(reg.billdate) <= ?
     	and reg.egBillregistermis.voucherHeader is null
    ]]>
	</query>
	
	<query name="gettotalApprovedMBs">
		<![CDATA[
     	select mbd.workOrderActivity.id,mbd.quantity  from MBDetails mbd
     	 where mbd.mbHeader.egwStatus.code = ? and mbd.mbHeader.isLegacyMB!=1 
     	and mbd.mbHeader.workOrderEstimate.workOrder.id = ? and mbd.mbHeader.workOrderEstimate.id = ? and trunc(mbd.mbHeader.state.createdDate) <= ? and mbd.mbHeader.egBillregister is null
     	group by mbd.workOrderActivity.id,mbd.quantity, mbd.mbHeader.id
    ]]>
	</query>
	<query name="gettotalApprovedMBsForCancelledBill">
		<![CDATA[
     	 select mbd.workOrderActivity.id,mbd.quantity from MBDetails mbd
     	 where mbd.mbHeader.egwStatus.code = ? and mbd.mbHeader.isLegacyMB!=1 
     	and mbd.mbHeader.workOrderEstimate.workOrder.id = ? and mbd.mbHeader.workOrderEstimate.id = ? and trunc(mbd.mbHeader.state.createdDate) <= ? 
     	and mbd.mbHeader.egBillregister is not null and mbd.mbHeader.egBillregister.status.code = ? group by mbd.workOrderActivity.id,mbd.quantity, mbd.mbHeader.id
    ]]>
	</query>
	<query name="getMBAmountForBill">
		<![CDATA[
     	 select mbd.workOrderActivity.id,mbd.quantity  from MBDetails mbd
     	 where mbd.mbHeader.egwStatus.code = ?  and mbd.mbHeader.isLegacyMB!=1 
     	and mbd.mbHeader.egBillregister.id = ? group by mbd.workOrderActivity.id,mbd.quantity, mbd.mbHeader.id
    ]]>
	</query>
	<query name="totalEstimatedQuantity">
		<![CDATA[
           select sum(woa.approvedQuantity) from WorkOrderActivity woa where woa.workOrderEstimate.workOrder.egwStatus.code<>'CANCELLED' 
           and woa.workOrderEstimate.workOrder = ? 
            group by woa,woa.activity having (id = ? or activity.id = ?)
   		]]>  
	</query>
	<query name="totalEstimatedQuantityForRE"> 
		<![CDATA[
	     	select sum(woa.approvedQuantity*coalesce((CASE WHEN woa.activity.revisionType = 'REDUCED_QUANTITY' THEN -1 
	     	WHEN woa.activity.revisionType = 'ADDITIONAL_QUANTITY' THEN 1 WHEN woa.activity.revisionType = 'NON_TENDERED_ITEM' THEN 1 
	     	WHEN woa.activity.revisionType = 'LUMP_SUM_ITEM' THEN 1 END),1)) from WorkOrderActivity woa where woa.activity.abstractEstimate.egwStatus.code = 'APPROVED' 
	     	and woa.activity.createdDate < ? and woa.workOrderEstimate.workOrder.egwStatus.code<>'CANCELLED' 
	     	and ((woa.activity.parent is null and woa.workOrderEstimate.workOrder = ?) or (woa.workOrderEstimate.workOrder.parent is not null and woa.workOrderEstimate.workOrder.parent = ?)) 
	     	group by woa.activity.parent having (woa.activity.parent is not null and woa.activity.parent.id = ? ) 
    	]]>
	</query>
	<query name="totalEstimatedQuantityInRE">
		<![CDATA[            
            select sum(woa.approvedQuantity) from WorkOrderActivity woa where woa.activity.abstractEstimate.egwStatus.code != 'CANCELLED' and 
            woa.activity.abstractEstimate.id != ? and woa.workOrderEstimate.workOrder.egwStatus.code<>'CANCELLED' and 
            (woa.workOrderEstimate.workOrder = ? or (woa.activity.parent is null and woa.workOrderEstimate.workOrder.parent is not null and woa.workOrderEstimate.workOrder.parent = ?))
            group by woa,woa.activity having (id = ? or activity.id = ?)
   		]]>  
	</query>
	<query name="totalEstimatedQuantityForREinRE">
		<![CDATA[
     	select sum(woa.approvedQuantity*coalesce((CASE WHEN woa.activity.revisionType = 'REDUCED_QUANTITY' THEN -1 
	     	WHEN woa.activity.revisionType = 'ADDITIONAL_QUANTITY' THEN 1 WHEN woa.activity.revisionType = 'NON_TENDERED_ITEM' THEN 1 
	     	WHEN woa.activity.revisionType = 'LUMP_SUM_ITEM' THEN 1 END),1)) from WorkOrderActivity woa where woa.activity.abstractEstimate.egwStatus.code != 'CANCELLED' 
     	and woa.activity.abstractEstimate.id != ? and woa.workOrderEstimate.workOrder.egwStatus.code<>'CANCELLED' and (woa.workOrderEstimate.workOrder = ? or 
     	(woa.workOrderEstimate.workOrder.parent is not null and woa.workOrderEstimate.workOrder.parent = ?))
     	group by woa.activity.parent having (woa.activity.parent is not null and woa.activity.parent.id = ? ) 
    ]]> 
	</query>
	
		<query name="totalEstimatedQuantityForPreviousREs">
		<![CDATA[
     	select sum(woa.approvedQuantity*coalesce((CASE WHEN woa.activity.revisionType = 'REDUCED_QUANTITY' THEN -1 
	     	WHEN woa.activity.revisionType = 'ADDITIONAL_QUANTITY' THEN 1 WHEN woa.activity.revisionType = 'NON_TENDERED_ITEM' THEN 1 
	     	WHEN woa.activity.revisionType = 'LUMP_SUM_ITEM' THEN 1 END),1)) from WorkOrderActivity woa where woa.activity.abstractEstimate.egwStatus.code != 'CANCELLED' 
     	and woa.activity.abstractEstimate.createdDate < (select est.createdDate from AbstractEstimate est where est.id = ?) 
     	and woa.workOrderEstimate.workOrder.egwStatus.code<>'CANCELLED' and (woa.workOrderEstimate.workOrder = ? 
     	or (woa.workOrderEstimate.workOrder.parent is not null and woa.workOrderEstimate.workOrder.parent = ?))
     	group by woa.activity.parent having (woa.activity.parent is not null and woa.activity.parent.id = ? ) 
    ]]> 
	</query>
	</hibernate-mapping>
