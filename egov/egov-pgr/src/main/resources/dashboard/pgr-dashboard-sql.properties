#
#    eGov  SmartCity eGovernance suite aims to improve the internal efficiency,transparency,
#    accountability and the service delivery of the government  organizations.
#
#     Copyright (C) 2017  eGovernments Foundation
#
#     The updated version of eGov suite of products as by eGovernments Foundation
#     is available at http://www.egovernments.org
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program. If not, see http://www.gnu.org/licenses/ or
#     http://www.gnu.org/licenses/gpl.html .
#
#     In addition to the terms of the GPL license to be adhered to in using this
#     program, the following additional terms are to be complied with:
#
#         1) All versions of this program, verbatim or modified must carry this
#            Legal Notice.
#            Further, all user interfaces, including but not limited to citizen facing interfaces,
#            Urban Local Bodies interfaces, dashboards, mobile applications, of the program and any
#            derived works should carry eGovernments Foundation logo on the top right corner.
#
#            For the logo, please refer http://egovernments.org/html/logo/egov_logo.png.
#            For any further queries on attribution, including queries on brand guidelines,
#            please contact contact@egovernments.org
#
#         2) Any misrepresentation of the origin of the material is prohibited. It
#            is required that all modified versions of this material be marked in
#            reasonable ways as different from the original version.
#
#         3) This license does not grant any rights to any user of the program
#            with regards to rights under trademark law for use of the trade names
#            or trademarks of eGovernments Foundation.
#
#   In case of any queries, you can reach eGovernments Foundation at contact@egovernments.org.
#
#

pgr.comp.reg.weekly.trend = SELECT TO_CHAR(createddate, 'MM') ||'-'|| TO_CHAR(createddate, 'DD')  AS MONTHDAY,COUNT(*)  AS compno \
FROM egpgr_complaint cd WHERE createddate BETWEEN :fromDate AND :toDate \
GROUP BY TO_CHAR(createddate, 'MM'),TO_CHAR(createddate, 'DD') ORDER BY TO_CHAR(createddate, 'MM'),TO_CHAR(createddate, 'DD')

pgr.comp.resolution.weekly.trend = SELECT SUM(crd.compCnt),crd.days FROM (SELECT COUNT(*) compCnt, TO_CHAR(c.createddate, 'MM-DD') days, c.crn \
FROM egpgr_complaintstatus cs, egpgr_complaint c WHERE c.createddate BETWEEN :fromDate AND :toDate \
AND c.status = cs.id AND cs.name IN ('COMPLETED','REJECTED','WITHDRAWN','CLOSED') GROUP BY TO_CHAR(c.createddate, 'MM-DD'),c.crn ) as crd GROUP BY crd.days

pgr.comp.six.month.aggr = SELECT TO_CHAR(cd.createddate,'MON-yyyy') as mnth ,COUNT(*) compCnt FROM egpgr_complaint cd \
WHERE cd.createddate BETWEEN :fromDate AND :toDate GROUP BY 1 order by 1;

pgr.comp.type.wise.perc = SELECT ct.name ctname, ct.id ctid, count(ct.name) counts FROM egpgr_complaint cd,egpgr_complainttype ct \
WHERE cd.complaintType =ct.id AND cd.createddate BETWEEN :fromDate AND :toDate GROUP BY ct.name, \
ct.id ORDER BY counts DESC

pgr.wardwiseperformance = SELECT a.wardname, COALESCE(a.BefTotalpen,0) noOfCompAsOnBefore14days, COALESCE(a.BefTotalclose,0) Before14daysTotalclose, \
COALESCE(a.AfRecTotal,0) noOfCompReceivedBtwCurrent14days, COALESCE(a.Total_pen,0) noOfCompPenAsonDate , COALESCE(a.AftTotalclose,0) AftTotalclose, \
a.latitude, a.longitude, a.wardid FROM (SELECT bndry.latitude, bndry.longitude,bndry.id AS wardid,bndry.name AS wardname,COALESCE(SUM(CASE WHEN compl.createddate <= :thirteenDaysBefore \
AND cs.name IN('REGISTERED','FORWARDED', 'PROCESSING','REOPENED') THEN 1 END),'0') AS BefTotalpen , COALESCE(SUM(CASE WHEN compl.createddate <= :thirteenDaysBefore \
AND cs.name NOT IN('REGISTERED','FORWARDED', 'PROCESSING','REOPENED') AND state.lastmodifieddate >= :thirteenDaysBefore THEN 1 \
END),'0') AS BefTotalclose , COALESCE(SUM(CASE WHEN compl.createddate >= :fourteenDaysBefore AND compl.createddate <= :currentDate \
THEN 1 END),'0') AS AfRecTotal,COALESCE(SUM(CASE WHEN compl.createddate <= :currentDate AND cs.name IN('REGISTERED','FORWARDED', 'PROCESSING','REOPENED') \
THEN 1 END),'0') AS Total_pen , COALESCE(SUM(CASE WHEN compl.createddate <= :currentDate AND cs.name NOT IN('REGISTERED','FORWARDED', 'PROCESSING','REOPENED') \
THEN 1 END),'0') AS AftTotalclose FROM eg_wf_states state, egpgr_complaintstatus cs, egpgr_complaint compl LEFT JOIN eg_boundary bndry ON compl.location =bndry.id \
WHERE compl.location is not null AND compl.state_id=state.id AND compl.status =cs.id GROUP BY bndry.latitude, bndry.longitude, wardname, wardid ORDER BY wardname) a;

pgr.wardwise.ageing=SELECT COUNT(CASE WHEN cd.createddate < :grtthn90 THEN 1 END) grtthn90, \
COUNT(CASE WHEN cd.createddate BETWEEN :lsthn90 AND :grtthn45 THEN 1 END) btw45to90, \
COUNT(CASE WHEN cd.createddate BETWEEN :lsthn45 AND :grtthn15 THEN 1 END) btw15to45, \
COUNT(CASE WHEN cd.createddate BETWEEN :lsthn15 AND :currdate THEN 1 END) lsthn15 \
FROM egpgr_complaint cd,egpgr_complaintstatus cs,eg_boundary b WHERE cd.status  = cs.id AND cd.location IS NOT NULL \
AND cd.location = b.id AND b.name = :wardName AND cs.name IN ('REGISTERED','FORWARDED', 'PROCESSING','REOPENED');

pgr.comp.count.sla.breakup = SELECT COUNT(CASE WHEN comp.createddate  < :grtthn90 THEN 1 END) grtthn90, COUNT(CASE WHEN  \
comp.createddate BETWEEN :lsthn90 AND :grtthn45 THEN 1 END) btw45to90, COUNT(CASE WHEN comp.createddate BETWEEN :lsthn45 AND :grtthn15  \
THEN 1 END) btw15to45, COUNT(CASE WHEN comp.createddate BETWEEN :lsthn15 AND :currdate THEN 1 END) lsthn15 FROM egpgr_complaint comp, \
egpgr_Complaintstatus cs WHERE comp.status= cs.id AND cs.name IN ('REGISTERED','FORWARDED', 'PROCESSING','REOPENED')

pgr.open.comp.aggr = SELECT bndry1.NAME as bndryname, bndry1.ID bndry1id,bndry1.longitude as bndry1lng,bndry1.latitude as bndry1lat, \
cs.name as statusname,count(*),cd.createddate as compdate FROM egpgr_complaint cd, eg_boundary bndry1, egpgr_complaintstatus cs \
WHERE cd.status = cs.id AND cd.createddate BETWEEN :fromDate AND :toDate AND cd.location = bndry1.id AND cd.location IS NOT NULL \
group by bndry1.ID,bndry1.longitude,bndry1.latitude,bndry1.NAME, cs.name,cd.createddate order by bndry1.NAME

pgr.bndry.wise.perc = SELECT bndry.boundaryNum boundaryNum,bndry.id WARDID,COUNT(*) AS count \
FROM egpgr_complaint cd,eg_boundary bndry WHERE cd.location = bndry.id AND cd.location  IS NOT NULL AND  \
cd.createddate BETWEEN :fromDate AND :toDate AND cd.complaintType = :compTypeId GROUP BY bndry.id, bndry.boundaryNum ORDER BY count DESC

pgr.top.comp.types =   SELECT alltypes.mon, SUM(alltypes.cnt),alltypes.ctname FROM (SELECT TO_CHAR(cd.createddate,'MM') mon,ct.name ctname,  \
  ct.id ctid, COUNT(*) AS cnt FROM egpgr_complaint cd, egpgr_complainttype ct WHERE cd.complainttype =ct.id  \
  AND cd.createddate BETWEEN :fromDate AND :toDate AND ct.id IN (SELECT comptypes.ctid FROM (SELECT DISTINCT ct.id ctid, \
  COUNT(*) AS cnt FROM egpgr_complaint cd,egpgr_complainttype ct WHERE cd.complainttype =ct.id AND cd.createddate \
  BETWEEN :fromDate AND :toDate GROUP BY ct.name, ct.id ORDER BY cnt DESC limit 5) comptypes) GROUP BY ct.name, \
  ct.id,cd.createddate ORDER BY cnt DESC) alltypes GROUP BY ctname,mon order by ctname, mon
 
pgr.top.comp.types.current.month =SELECT comptypes.ctname FROM (SELECT DISTINCT ct.id ctid, ct.name as ctname, \
  COUNT(*) AS cnt FROM egpgr_complaint cd,egpgr_complainttype ct WHERE cd.complainttype =ct.id AND cd.createddate \
  BETWEEN :fromDate AND :toDate GROUP BY ct.name, ct.id ORDER BY cnt DESC limit 5) comptypes order by ctname 
  
pgr.comp.per.property.six.month.wardwise = SELECT property.wardname,property.wardid, \
ROUND((complaints.compCnt/property.propCnt),2) compperprop FROM (SELECT b.name wardname,b.id_bndry wardid,COUNT(*) propCnt FROM mv1, \
eg_boundary b WHERE mv1.wardid = b.ID_BNDRY AND b.id_bndry_type=3 AND b.name LIKE 'N%'GROUP BY b.name,b.id_bndry) property  \
LEFT OUTER JOIN (SELECT ward.name wardname,ward.id_bndry wardid,COUNT(*) compCnt FROM eggr_complaintdetails cd,eggr_complainttypes ct, \
EG_BOUNDARY zone,EG_BOUNDARY ward,eggr_redressaldetails rd,eg_department dept WHERE cd.complainttype=ct.complainttypeid AND  \
cd.bndry = ward.ID_BNDRY AND ward.parent = zone.ID_BNDRY AND cd.deptid = dept.id_dept AND cd.complaintid = rd.COMPLAINTID AND  \
cd.complaintdate BETWEEN add_months(sysdate,-6) AND sysdate AND ward.name LIKE 'N%' AND ward.id_bndry_type=3  \
GROUP BY ward.name,ward.id_bndry) complaints ON complaints.wardid=property.wardid ORDER BY compperprop DESC

pgr.comp.redressed.six.month.wardwise = SELECT ward.name,ward.id_bndry,COUNT(*) compCnt FROM eggr_complaintdetails cd, \
eggr_complainttypes ct,EG_BOUNDARY zone,EG_BOUNDARY ward,  eggr_redressaldetails rd,eg_department dept, \
(SELECT redressalid,MAX(TIMESTAMP) compl_date FROM eggr_status_tracker c WHERE statusid NOT IN (2,3,4,9) GROUP BY redressalid) c  \
WHERE cd.complainttype = ct.complainttypeid AND cd.bndry = ward.ID_BNDRY AND ward.parent = zone.ID_BNDRY AND cd.deptid = dept.id_dept AND  \
cd.complaintid = rd.COMPLAINTID AND rd.redressalid = c.redressalid(+) AND c.compl_date BETWEEN add_months(sysdate,-6) AND sysdate AND  \
ward.name LIKE 'N%' AND ward.id_bndry_type=3 GROUP BY ward.name,ward.id_bndry ORDER BY compcnt DESC

pgr.comp.reg.six.month.wardwise = SELECT ward.name,ward.boundarynum,COUNT(*) compCnt FROM egpgr_complaint cd,egpgr_complainttype ct, \
EG_BOUNDARY zone,EG_BOUNDARY ward, eg_department dept WHERE cd.complainttype=ct.id AND  \
cd.location = ward.id AND ward.parent = zone.ID AND cd.department =dept.id AND  \
cd.createddate BETWEEN current_date - interval '6 month' AND current_date AND \
ward.boundarytype in (select id from eg_boundary_type where hierarchytype = (select id from eg_hierarchy_type where name='ADMINISTRATION') and name='Ward') GROUP BY ward.name, \
ward.id ORDER BY compcnt DESC ;

